{"ast":null,"code":"import dayjs from \"dayjs\";\nimport dayOfYear from \"dayjs/plugin/dayOfYear\";\nimport { range } from \"ramda\";\n\nconst rank = (start, end) => {\n  return range(start + 0, end + 0);\n};\n\ndayjs.extend(dayOfYear);\nexport function getRangeOfDates(firstDate, lastDate) {\n  let start = dayjs(firstDate).dayOfYear();\n  let end = dayjs(lastDate).dayOfYear();\n  let startYear = dayjs(firstDate).year();\n  let days = rank(start, end); //should work between years now\n\n  console.log(\"EventHelpers: days=\" + days);\n  const dates = days.map(day => dayjs(`${start > end ? startYear + 1 : startYear}-01-01`).dayOfYear(day));\n  console.log(\"EventHelpers: \" + dates);\n  return dates;\n}","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/components/EventHelpers.js"],"names":["dayjs","dayOfYear","range","rank","start","end","extend","getRangeOfDates","firstDate","lastDate","startYear","year","days","console","log","dates","map","day"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,KAAT,QAAsB,OAAtB;;AACA,MAAMC,IAAI,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACzB,SAAOH,KAAK,CAACE,KAAK,GAAC,CAAP,EAAUC,GAAG,GAAC,CAAd,CAAZ;AACH,CAFD;;AAGAL,KAAK,CAACM,MAAN,CAAaL,SAAb;AAGA,OAAO,SAASM,eAAT,CAAyBC,SAAzB,EAAoCC,QAApC,EAA8C;AACjD,MAAIL,KAAK,GAAGJ,KAAK,CAACQ,SAAD,CAAL,CAAiBP,SAAjB,EAAZ;AACA,MAAII,GAAG,GAAGL,KAAK,CAACS,QAAD,CAAL,CAAgBR,SAAhB,EAAV;AACA,MAAIS,SAAS,GAAGV,KAAK,CAACQ,SAAD,CAAL,CAAiBG,IAAjB,EAAhB;AAEA,MAAIC,IAAI,GAAGT,IAAI,CAACC,KAAD,EAAQC,GAAR,CAAf,CALiD,CAKrB;;AAC5BQ,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBF,IAApC;AACA,QAAMG,KAAK,GAAGH,IAAI,CAACI,GAAL,CAAUC,GAAD,IACnBjB,KAAK,CAAE,GAAEI,KAAK,GAAGC,GAAR,GAAcK,SAAS,GAAG,CAA1B,GAA8BA,SAAU,QAA5C,CAAL,CAA0DT,SAA1D,CAAoEgB,GAApE,CADU,CAAd;AAGAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBC,KAA/B;AACA,SAAOA,KAAP;AACH","sourcesContent":["import dayjs from \"dayjs\";\nimport dayOfYear from \"dayjs/plugin/dayOfYear\";\nimport { range } from \"ramda\";\nconst rank = (start, end) => {\n    return range(start+0, end+0)\n}\ndayjs.extend(dayOfYear)\n\n\nexport function getRangeOfDates(firstDate, lastDate) {\n    let start = dayjs(firstDate).dayOfYear()\n    let end = dayjs(lastDate).dayOfYear()\n    let startYear = dayjs(firstDate).year()\n\n    let days = rank(start, end) //should work between years now\n    console.log(\"EventHelpers: days=\" + days)\n    const dates = days.map((day) => (\n        dayjs(`${start > end ? startYear + 1 : startYear}-01-01`).dayOfYear(day)\n    ))\n    console.log(\"EventHelpers: \" + dates)\n    return dates\n}\n"]},"metadata":{},"sourceType":"module"}