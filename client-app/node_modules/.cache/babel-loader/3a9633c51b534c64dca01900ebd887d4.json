{"ast":null,"code":"var _jsxFileName = \"/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/Event.js\";\nimport dayjs from \"dayjs\"; //import weekday from \"dayjs/plugin/weekday\"\n\nimport dayOfYear from \"dayjs/plugin/dayOfYear\";\nimport { range } from \"ramda\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndayjs.extend(dayOfYear); //could store in db as YYYY-MM-DD but idk how to convert string to variables.\n//YES YOU CAN. YAY!! use format: dayjs(dateString).year() => dayjs(\"2021-01-01\").year() === 2021\n//get: .year(), .month(), .date(), can also use set\n//sample event object\n// const event = {\n//     eventName: \"Holiday Reunion\",\n//     firstDate: \"2021-11-16\", //can extract year, month, day from here\n//     lastDate: \"2021-11-18\", //after extracting days, implies 16-18 or 16, 17, 18\n//     collabNames: [\"Aristos\", \"Krithik\", \"Alex\"] //can find #of people based on array locally\n//     //will need to pass in objects for each collaborator showing their availablity.\n// }\n\nconst getMonth = dateString => {\n  return dayjs(dateString).format(\"MMMM\");\n};\n\nconst getDay = dateString => {\n  return dayjs(dateString).format(\"D\");\n};\n\nconst TimeGrid = _ref => {\n  let {\n    numCollabs = 3\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `grid h-full grid-cols-${numCollabs} border-2 border-gray-600 gap-1 w-full`,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_c = TimeGrid;\n\nconst TimeTable = _ref2 => {\n  let {\n    event\n  } = _ref2;\n  //I think it has to deal with props?\n  //let { eventName, firstDate, lastDate, collabNames } = eventz\n  const numCollabs = Array(event.collabNames).length;\n  const year = dayjs(event.firstDate).year();\n  const base = `${year}-01-01`;\n  const startDay = dayjs(event.firstDate).dayOfYear();\n  const endDay = dayjs(event.lastDate).dayOfYear() + 1; //returns range of dateStrings that can be parsed\n\n  const days = range(startDay, endDay).map(day => {\n    const a = dayjs(base).dayOfYear(day); //gives day.js object\n\n    return a.format(\"YYYY-MM-DD\"); //format it to be in string format\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"root flex w-3/4 mx-auto pt-20 flex-row justify-between space-x-20\",\n      children: days.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-2xl\",\n        children: `${getMonth(day)} ${getDay(day)}`\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"root flex w-3/4 mx-auto py-8 flex-row justify-between space-x-20\",\n      children: days.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: /*#__PURE__*/_jsxDEV(TimeGrid, {\n          num: numCollabs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 24\n        }, this)\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this) //need to add grid here or inside of other div above.\n  ;\n};\n\n_c2 = TimeTable;\nexport default function Event(_ref3) {\n  let {\n    navigate,\n    event,\n    timeslots\n  } = _ref3;\n  //should be passed in year, month, range of days (eg. 1-4)\n  //also, collaborators' names based on accounts (Aristos, Krithik, Alex) and number of people for grid divisions\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-purple-400 w-full h-screen text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/2 mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white text-7xl font-bold tracking-tight pt-10\",\n        children: \"MeetUp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-yellow-300 text-4xl font-medium tracking-wide pt-10 pb-5\",\n        children: event.eventname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-blue-900 text-3xl tracking-wide py-10 border-b-2 \",\n        children: [\"By \", event.owner]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimeTable, {\n      event: event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: navigate(\"/Dashboard\"),\n      className: \" my-10 text-4xl border-b-2 border-blue-900 text-blue-900 hover:border-blue-800 hover:text-gray-600 cursor-pointer\",\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_c3 = Event;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TimeGrid\");\n$RefreshReg$(_c2, \"TimeTable\");\n$RefreshReg$(_c3, \"Event\");","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/Event.js"],"names":["dayjs","dayOfYear","range","extend","getMonth","dateString","format","getDay","TimeGrid","numCollabs","TimeTable","event","Array","collabNames","length","year","firstDate","base","startDay","endDay","lastDate","days","map","day","a","Event","navigate","timeslots","eventname","owner"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\n//import weekday from \"dayjs/plugin/weekday\"\nimport dayOfYear from \"dayjs/plugin/dayOfYear\"\nimport { range } from \"ramda\";\n\ndayjs.extend(dayOfYear);\n\n//could store in db as YYYY-MM-DD but idk how to convert string to variables.\n//YES YOU CAN. YAY!! use format: dayjs(dateString).year() => dayjs(\"2021-01-01\").year() === 2021\n//get: .year(), .month(), .date(), can also use set\n\n//sample event object\n// const event = {\n//     eventName: \"Holiday Reunion\",\n//     firstDate: \"2021-11-16\", //can extract year, month, day from here\n//     lastDate: \"2021-11-18\", //after extracting days, implies 16-18 or 16, 17, 18\n//     collabNames: [\"Aristos\", \"Krithik\", \"Alex\"] //can find #of people based on array locally\n//     //will need to pass in objects for each collaborator showing their availablity.\n// }\n\n\nconst getMonth = (dateString) => {\n    return dayjs(dateString).format(\"MMMM\") \n}\n\nconst getDay = (dateString) => {\n    return dayjs(dateString).format(\"D\")\n}\n\nconst TimeGrid = ({numCollabs = 3}) => {\n\n    return (\n        <div className={`grid h-full grid-cols-${numCollabs} border-2 border-gray-600 gap-1 w-full`}>\n            <span>hello</span>\n            <span>hello</span>\n        </div>\n    )\n}\n\n\nconst TimeTable = ({event}) => { //I think it has to deal with props?\n    //let { eventName, firstDate, lastDate, collabNames } = eventz\n    \n    const numCollabs = Array(event.collabNames).length;\n    const year = dayjs(event.firstDate).year()\n    const base =`${year}-01-01` \n\n    const startDay = dayjs(event.firstDate).dayOfYear()    \n    const endDay = dayjs(event.lastDate).dayOfYear() + 1\n    \n    //returns range of dateStrings that can be parsed\n    const days = range(startDay, endDay)\n         .map((day) => {\n             const a = dayjs(base).dayOfYear(day) //gives day.js object\n             return a.format(\"YYYY-MM-DD\") //format it to be in string format\n         }) \n\n    return (\n        <div>\n            <div className=\"root flex w-3/4 mx-auto pt-20 flex-row justify-between space-x-20\">\n                {days.map((day) => (\n                    <div key={day} className=\"text-center text-2xl\">\n                        {`${getMonth(day)} ${getDay(day)}`}\n                    </div>\n                ))}\n            </div>\n            <div className=\"root flex w-3/4 mx-auto py-8 flex-row justify-between space-x-20\">\n                {days.map((day) => (\n                    <div key={day} className=\"\">\n                       <TimeGrid num={numCollabs}/>\n                    </div>\n                ))}\n            </div>\n        </div>\n        //need to add grid here or inside of other div above.\n    )\n}\n\n\nexport default function Event({navigate, event, timeslots}) {\n    //should be passed in year, month, range of days (eg. 1-4)\n    //also, collaborators' names based on accounts (Aristos, Krithik, Alex) and number of people for grid divisions\n\n\n    return (\n        <div className=\"bg-purple-400 w-full h-screen text-center\">\n            <div className=\"w-1/2 mx-auto\">\n                <h1 className=\"text-white text-7xl font-bold tracking-tight pt-10\">MeetUp</h1>\n                <h2 className=\"text-yellow-300 text-4xl font-medium tracking-wide pt-10 pb-5\">{event.eventname}</h2>\n                <h3 className=\"text-blue-900 text-3xl tracking-wide py-10 border-b-2 \">By {event.owner}</h3>\n            </div>\n            <TimeTable event={event}/>\n            <button onClick={navigate(\"/Dashboard\")} className=\" my-10 text-4xl border-b-2 border-blue-900 text-blue-900 hover:border-blue-800\n             hover:text-gray-600 cursor-pointer\">Back</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}