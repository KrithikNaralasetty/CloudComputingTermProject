{"ast":null,"code":"import dayjs from\"dayjs\";//import weekday from \"dayjs/plugin/weekday\"\nimport dayOfYear from\"dayjs/plugin/dayOfYear\";import{range}from\"ramda\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";dayjs.extend(dayOfYear);//could store in db as YYYY-MM-DD but idk how to convert string to variables.\n//YES YOU CAN. YAY!! use format: dayjs(dateString).year() => dayjs(\"2021-01-01\").year() === 2021\n//get: .year(), .month(), .date(), can also use set\n//sample event object\nvar event={eventName:\"Holiday Reunion\",firstDate:\"2021-11-16\",//can extract year, month, day from here\nlastDate:\"2021-11-18\",//after extracting days, implies 16-18 or 16, 17, 18\ncollabNames:[\"Aristos\",\"Krithik\",\"Alex\"]//can find #of people based on array locally\n//will need to pass in objects for each collaborator showing their availablity.\n};var getMonth=function getMonth(dateString){return dayjs(dateString).format(\"MMMM\");};var getDay=function getDay(dateString){return dayjs(dateString).format(\"D\");};var TimeGrid=function TimeGrid(_ref){var _ref$numCollabs=_ref.numCollabs,numCollabs=_ref$numCollabs===void 0?3:_ref$numCollabs;return/*#__PURE__*/_jsxs(\"div\",{className:\"grid h-full grid-cols-\".concat(numCollabs,\" border-2 border-gray-600 gap-1 w-full\"),children:[/*#__PURE__*/_jsx(\"span\",{children:\"hello\"}),/*#__PURE__*/_jsx(\"span\",{children:\"hello\"})]});};var TimeTable=function TimeTable(_ref2){var eventz=_ref2.eventz;//I think it has to deal with props?\n//let { eventName, firstDate, lastDate, collabNames } = eventz\nvar numCollabs=Array(event.collabNames).length;var year=dayjs(event.firstDate).year();var base=\"\".concat(year,\"-01-01\");var startDay=dayjs(event.firstDate).dayOfYear();var endDay=dayjs(event.lastDate).dayOfYear()+1;//returns range of dateStrings that can be parsed\nvar days=range(startDay,endDay).map(function(day){var a=dayjs(base).dayOfYear(day);//gives day.js object\nreturn a.format(\"YYYY-MM-DD\");//format it to be in string format\n});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"root flex w-3/4 mx-auto pt-20 flex-row justify-between space-x-20\",children:days.map(function(day){return/*#__PURE__*/_jsx(\"div\",{className:\"text-center text-2xl\",children:\"\".concat(getMonth(day),\" \").concat(getDay(day))},day);})}),/*#__PURE__*/_jsx(\"div\",{className:\"root flex w-3/4 mx-auto py-8 flex-row justify-between space-x-20\",children:days.map(function(day){return/*#__PURE__*/_jsx(\"div\",{className:\"\",children:/*#__PURE__*/_jsx(TimeGrid,{num:numCollabs})},day);})})]})//need to add grid here or inside of other div above.\n;};export default function Event(){//should be passed in year, month, range of days (eg. 1-4)\n//also, collaborators' names based on accounts (Aristos, Krithik, Alex) and number of people for grid divisions\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"bg-purple-400 w-full h-screen text-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"w-1/2 mx-auto\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-white text-7xl font-bold tracking-tight pt-10\",children:\"MeetUp\"}),/*#__PURE__*/_jsxs(\"h2\",{className:\"text-yellow-300 text-4xl font-medium tracking-wide py-10 \",children:[event.eventName,\" | Nov 13-17, 2021\"]}),/*#__PURE__*/_jsx(\"h3\",{className:\"text-blue-900 text-3xl tracking-wide py-10 border-b-2 \",children:\"By Aristos\"})]}),/*#__PURE__*/_jsx(TimeTable,{event:event}),/*#__PURE__*/_jsx(\"button\",{className:\" my-10 text-4xl border-b-2 border-blue-900 text-blue-900 hover:border-blue-800 hover:text-gray-600 cursor-pointer\",children:\"Back\"})]});}","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/Event.js"],"names":["dayjs","dayOfYear","range","extend","event","eventName","firstDate","lastDate","collabNames","getMonth","dateString","format","getDay","TimeGrid","numCollabs","TimeTable","eventz","Array","length","year","base","startDay","endDay","days","map","day","a","Event"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA;AACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,OAASC,KAAT,KAAsB,OAAtB,C,wFAEAF,KAAK,CAACG,MAAN,CAAaF,SAAb,EAEA;AACA;AACA;AAEA;AACA,GAAMG,CAAAA,KAAK,CAAG,CACVC,SAAS,CAAE,iBADD,CAEVC,SAAS,CAAE,YAFD,CAEe;AACzBC,QAAQ,CAAE,YAHA,CAGc;AACxBC,WAAW,CAAE,CAAC,SAAD,CAAY,SAAZ,CAAuB,MAAvB,CAA+B;AAC5C;AALU,CAAd,CASA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,UAAD,CAAgB,CAC7B,MAAOV,CAAAA,KAAK,CAACU,UAAD,CAAL,CAAkBC,MAAlB,CAAyB,MAAzB,CAAP,CACH,CAFD,CAIA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACF,UAAD,CAAgB,CAC3B,MAAOV,CAAAA,KAAK,CAACU,UAAD,CAAL,CAAkBC,MAAlB,CAAyB,GAAzB,CAAP,CACH,CAFD,CAIA,GAAME,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAsB,0BAApBC,UAAoB,CAApBA,UAAoB,0BAAP,CAAO,iBAEnC,mBACI,aAAK,SAAS,iCAA2BA,UAA3B,0CAAd,wBACI,+BADJ,cAEI,+BAFJ,GADJ,CAMH,CARD,CAWA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,OAAc,IAAZC,CAAAA,MAAY,OAAZA,MAAY,CAAE;AAC9B;AAEA,GAAMF,CAAAA,UAAU,CAAGG,KAAK,CAACb,KAAK,CAACI,WAAP,CAAL,CAAyBU,MAA5C,CACA,GAAMC,CAAAA,IAAI,CAAGnB,KAAK,CAACI,KAAK,CAACE,SAAP,CAAL,CAAuBa,IAAvB,EAAb,CACA,GAAMC,CAAAA,IAAI,WAAKD,IAAL,UAAV,CAEA,GAAME,CAAAA,QAAQ,CAAGrB,KAAK,CAACI,KAAK,CAACE,SAAP,CAAL,CAAuBL,SAAvB,EAAjB,CACA,GAAMqB,CAAAA,MAAM,CAAGtB,KAAK,CAACI,KAAK,CAACG,QAAP,CAAL,CAAsBN,SAAtB,GAAoC,CAAnD,CAEA;AACA,GAAMsB,CAAAA,IAAI,CAAGrB,KAAK,CAACmB,QAAD,CAAWC,MAAX,CAAL,CACPE,GADO,CACH,SAACC,GAAD,CAAS,CACV,GAAMC,CAAAA,CAAC,CAAG1B,KAAK,CAACoB,IAAD,CAAL,CAAYnB,SAAZ,CAAsBwB,GAAtB,CAAV,CAAqC;AACrC,MAAOC,CAAAA,CAAC,CAACf,MAAF,CAAS,YAAT,CAAP,CAA8B;AACjC,CAJO,CAAb,CAMA,mBACI,oCACI,YAAK,SAAS,CAAC,mEAAf,UACKY,IAAI,CAACC,GAAL,CAAS,SAACC,GAAD,qBACN,YAAe,SAAS,CAAC,sBAAzB,oBACQhB,QAAQ,CAACgB,GAAD,CADhB,aACyBb,MAAM,CAACa,GAAD,CAD/B,GAAUA,GAAV,CADM,EAAT,CADL,EADJ,cAQI,YAAK,SAAS,CAAC,kEAAf,UACKF,IAAI,CAACC,GAAL,CAAS,SAACC,GAAD,qBACN,YAAe,SAAS,CAAC,EAAzB,uBACG,KAAC,QAAD,EAAU,GAAG,CAAEX,UAAf,EADH,EAAUW,GAAV,CADM,EAAT,CADL,EARJ,GAgBA;AAjBJ,CAmBH,CApCD,CAuCA,cAAe,SAASE,CAAAA,KAAT,EAAiB,CAC5B;AACA;AAGA,mBACI,aAAK,SAAS,CAAC,2CAAf,wBACI,aAAK,SAAS,CAAC,eAAf,wBACI,WAAI,SAAS,CAAC,oDAAd,oBADJ,cAEI,YAAI,SAAS,CAAC,2DAAd,WAA2EvB,KAAK,CAACC,SAAjF,wBAFJ,cAGI,WAAI,SAAS,CAAC,wDAAd,wBAHJ,GADJ,cAMI,KAAC,SAAD,EAAW,KAAK,CAAED,KAAlB,EANJ,cAOI,eAAQ,SAAS,CAAC,mHAAlB,kBAPJ,GADJ,CAYH","sourcesContent":["import dayjs from \"dayjs\";\n//import weekday from \"dayjs/plugin/weekday\"\nimport dayOfYear from \"dayjs/plugin/dayOfYear\"\nimport { range } from \"ramda\";\n\ndayjs.extend(dayOfYear);\n\n//could store in db as YYYY-MM-DD but idk how to convert string to variables.\n//YES YOU CAN. YAY!! use format: dayjs(dateString).year() => dayjs(\"2021-01-01\").year() === 2021\n//get: .year(), .month(), .date(), can also use set\n\n//sample event object\nconst event = {\n    eventName: \"Holiday Reunion\",\n    firstDate: \"2021-11-16\", //can extract year, month, day from here\n    lastDate: \"2021-11-18\", //after extracting days, implies 16-18 or 16, 17, 18\n    collabNames: [\"Aristos\", \"Krithik\", \"Alex\"] //can find #of people based on array locally\n    //will need to pass in objects for each collaborator showing their availablity.\n}\n\n\nconst getMonth = (dateString) => {\n    return dayjs(dateString).format(\"MMMM\") \n}\n\nconst getDay = (dateString) => {\n    return dayjs(dateString).format(\"D\")\n}\n\nconst TimeGrid = ({numCollabs = 3}) => {\n\n    return (\n        <div className={`grid h-full grid-cols-${numCollabs} border-2 border-gray-600 gap-1 w-full`}>\n            <span>hello</span>\n            <span>hello</span>\n        </div>\n    )\n}\n\n\nconst TimeTable = ({eventz}) => { //I think it has to deal with props?\n    //let { eventName, firstDate, lastDate, collabNames } = eventz\n    \n    const numCollabs = Array(event.collabNames).length;\n    const year = dayjs(event.firstDate).year()\n    const base =`${year}-01-01` \n\n    const startDay = dayjs(event.firstDate).dayOfYear()    \n    const endDay = dayjs(event.lastDate).dayOfYear() + 1\n    \n    //returns range of dateStrings that can be parsed\n    const days = range(startDay, endDay)\n         .map((day) => {\n             const a = dayjs(base).dayOfYear(day) //gives day.js object\n             return a.format(\"YYYY-MM-DD\") //format it to be in string format\n         }) \n\n    return (\n        <div>\n            <div className=\"root flex w-3/4 mx-auto pt-20 flex-row justify-between space-x-20\">\n                {days.map((day) => (\n                    <div key={day} className=\"text-center text-2xl\">\n                        {`${getMonth(day)} ${getDay(day)}`}\n                    </div>\n                ))}\n            </div>\n            <div className=\"root flex w-3/4 mx-auto py-8 flex-row justify-between space-x-20\">\n                {days.map((day) => (\n                    <div key={day} className=\"\">\n                       <TimeGrid num={numCollabs}/>\n                    </div>\n                ))}\n            </div>\n        </div>\n        //need to add grid here or inside of other div above.\n    )\n}\n\n\nexport default function Event() {\n    //should be passed in year, month, range of days (eg. 1-4)\n    //also, collaborators' names based on accounts (Aristos, Krithik, Alex) and number of people for grid divisions\n\n\n    return (\n        <div className=\"bg-purple-400 w-full h-screen text-center\">\n            <div className=\"w-1/2 mx-auto\">\n                <h1 className=\"text-white text-7xl font-bold tracking-tight pt-10\">MeetUp</h1>\n                <h2 className=\"text-yellow-300 text-4xl font-medium tracking-wide py-10 \">{event.eventName} | Nov 13-17, 2021</h2>\n                <h3 className=\"text-blue-900 text-3xl tracking-wide py-10 border-b-2 \">By Aristos</h3>\n            </div>\n            <TimeTable event={event}/>\n            <button className=\" my-10 text-4xl border-b-2 border-blue-900 text-blue-900 hover:border-blue-800\n             hover:text-gray-600 cursor-pointer\">Back</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}