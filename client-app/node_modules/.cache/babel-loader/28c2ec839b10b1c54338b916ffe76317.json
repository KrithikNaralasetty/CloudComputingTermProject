{"ast":null,"code":"//import { range } from \"ramda\";\nimport dayjs from \"dayjs\";\nimport dayOfYear from \"dayjs/plugin/dayOfYear\";\ndayjs.extend(dayOfYear);\nexport function getRangeOfDates(firstDate, lastDate) {\n  const range = function (start, end) {\n    let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let output = [];\n\n    if (typeof end === 'undefined') {\n      end = start;\n      start = 0;\n    }\n\n    for (let i = start; i < end; i += step) {\n      output.push(i);\n    }\n\n    return output;\n  };\n\n  const start = dayjs(firstDate).dayOfYear();\n  const end = dayjs(lastDate).dayOfYear();\n  const startYear = dayjs(firstDate).year();\n  const a = 1;\n  console.log(range(a, 5));\n  const days = range(start, end); //should work between years now\n\n  console.log(\"EventHelpers: days=\" + days);\n  const dates = days.map(day => dayjs(`${start > end ? startYear + 1 : startYear}-01-01`).dayOfYear(day));\n  console.log(\"EventHelpers: \" + dates);\n  return dates;\n}","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/components/EventHelpers.js"],"names":["dayjs","dayOfYear","extend","getRangeOfDates","firstDate","lastDate","range","start","end","step","output","i","push","startYear","year","a","console","log","days","dates","map","day"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAIAD,KAAK,CAACE,MAAN,CAAaD,SAAb;AAGA,OAAO,SAASE,eAAT,CAAyBC,SAAzB,EAAoCC,QAApC,EAA8C;AACjD,QAAMC,KAAK,GAAG,UAACC,KAAD,EAAQC,GAAR,EAA0B;AAAA,QAAbC,IAAa,uEAAN,CAAM;AACpC,QAAIC,MAAM,GAAG,EAAb;;AAEA,QAAI,OAAOF,GAAP,KAAe,WAAnB,EAAgC;AAC9BA,MAAAA,GAAG,GAAGD,KAAN;AACAA,MAAAA,KAAK,GAAG,CAAR;AACD;;AAED,SAAK,IAAII,CAAC,GAAGJ,KAAb,EAAoBI,CAAC,GAAGH,GAAxB,EAA6BG,CAAC,IAAIF,IAAlC,EAAwC;AACtCC,MAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACD;;AAED,WAAOD,MAAP;AACD,GAbH;;AAcA,QAAMH,KAAK,GAAGP,KAAK,CAACI,SAAD,CAAL,CAAiBH,SAAjB,EAAd;AACA,QAAMO,GAAG,GAAGR,KAAK,CAACK,QAAD,CAAL,CAAgBJ,SAAhB,EAAZ;AACA,QAAMY,SAAS,GAAGb,KAAK,CAACI,SAAD,CAAL,CAAiBU,IAAjB,EAAlB;AACA,QAAMC,CAAC,GAAG,CAAV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACS,CAAD,EAAI,CAAJ,CAAjB;AAEA,QAAMG,IAAI,GAAGZ,KAAK,CAACC,KAAD,EAAQC,GAAR,CAAlB,CArBiD,CAqBlB;;AAC/BQ,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBC,IAApC;AACA,QAAMC,KAAK,GAAGD,IAAI,CAACE,GAAL,CAAUC,GAAD,IACnBrB,KAAK,CAAE,GAAEO,KAAK,GAAGC,GAAR,GAAcK,SAAS,GAAG,CAA1B,GAA8BA,SAAU,QAA5C,CAAL,CAA0DZ,SAA1D,CAAoEoB,GAApE,CADU,CAAd;AAGAL,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBE,KAA/B;AACA,SAAOA,KAAP;AACH","sourcesContent":["//import { range } from \"ramda\";\nimport dayjs from \"dayjs\";\nimport dayOfYear from \"dayjs/plugin/dayOfYear\";\n\n\n\ndayjs.extend(dayOfYear)\n\n\nexport function getRangeOfDates(firstDate, lastDate) {\n    const range = (start, end, step = 1) => {\n        let output = [];\n      \n        if (typeof end === 'undefined') {\n          end = start;\n          start = 0;\n        }\n      \n        for (let i = start; i < end; i += step) {\n          output.push(i);\n        }\n      \n        return output;\n      };\n    const start = dayjs(firstDate).dayOfYear()\n    const end = dayjs(lastDate).dayOfYear()\n    const startYear = dayjs(firstDate).year()\n    const a = 1\n    console.log(range(a, 5))\n\n    const days = range(start, end) //should work between years now\n    console.log(\"EventHelpers: days=\" + days)\n    const dates = days.map((day) => (\n        dayjs(`${start > end ? startYear + 1 : startYear}-01-01`).dayOfYear(day)\n    ))\n    console.log(\"EventHelpers: \" + dates)\n    return dates\n}\n"]},"metadata":{},"sourceType":"module"}