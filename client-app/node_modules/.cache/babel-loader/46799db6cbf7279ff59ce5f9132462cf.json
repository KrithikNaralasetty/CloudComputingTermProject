{"ast":null,"code":"var _jsxFileName = \"/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/Event.js\";\nimport dayjs from \"dayjs\"; //import weekday from \"dayjs/plugin/weekday\"\n\nimport dayOfYear from \"dayjs/plugin/dayOfYear\";\nimport { range } from \"ramda\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndayjs.extend(dayOfYear); //could store in db as YYYY-MM-DD but idk how to convert string to variables.\n//YES YOU CAN. YAY!! use format: dayjs(dateString).year() => dayjs(\"2021-01-01\").year() === 2021\n//get: .year(), .month(), .date(), can also use set\n//sample event object\n\nconst event = {\n  eventName: \"Holiday Reunion\",\n  firstDate: \"2021-01-01\",\n  //can extract year, month, day from here\n  lastDate: \"2021-01-05\",\n  //after extracting days, implies 16-18 or 16, 17, 18\n  collabNames: [\"Aristos\", \"Krithik\", \"Alex\"] //can find #of people based on array locally\n  //will need to pass in objects for each collaborator showing their availablity.\n\n};\n\nconst getMonth = dateString => {\n  const a = dayjs(dateString).month();\n  return dayjs(a).format(\"MMMM\");\n};\n\nconst getDay = dateString => {\n  const a = dayjs(dateString).date();\n  return dayjs(a).format(\"D\");\n};\n\nconst TimeTable = eventz => {\n  //let { eventName: p, firstDate, lastDate, collabNames } = event\n  const event = {\n    //only works in here, can't be passed in?\n    eventName: \"Holiday Reunion\",\n    firstDate: \"2021-11-16\",\n    //can extract year, month, day from here\n    lastDate: \"2021-11-18\",\n    //after extracting days, implies 16-18 or 16, 17, 18\n    collabNames: [\"Aristos\", \"Krithik\", \"Alex\"] //can find #of people based on array locally\n    //will need to pass in objects for each collaborator showing their availablity.\n\n  };\n  const numCollabs = Array(event.collabNames).length;\n  const year = dayjs(event.firstDate).year();\n  const startDay = dayjs(event.firstDate).dayOfYear();\n  const endDay = dayjs(event.lastDate).dayOfYear() + 1; //console.log(event.firstDate) //not working\n\n  const days = range(startDay, endDay); //.map((day) => (\n  //    dayjs(`${year}-01-01`).dayOfYear(day)\n  //)) //creates range of dateStrings that can be parsed\n\n  console.log(endDay); //not coming out right\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex w-full py-20 flex-row justify-between space-x-20\",\n    children: days.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-2xl\",\n      children: `${getMonth(day)} ${getDay(day)}`\n    }, day, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_c = TimeTable;\nexport default function Event() {\n  //should be passed in year, month, range of days (eg. 1-4)\n  //also, collaborators' names based on accounts (Aristos, Krithik, Alex) and number of people for grid divisions\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-purple-400 w-full h-screen text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/2 mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white text-7xl font-bold tracking-tight pt-10\",\n        children: \"MeetUp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-yellow-300 text-4xl font-medium tracking-wide py-10 \",\n        children: [event.eventName, \" | Nov 13-17, 2021\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-blue-900 text-3xl tracking-wide py-10 border-b-2 \",\n        children: \"By Aristos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimeTable, {\n      event: event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_c2 = Event;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TimeTable\");\n$RefreshReg$(_c2, \"Event\");","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/Event.js"],"names":["dayjs","dayOfYear","range","extend","event","eventName","firstDate","lastDate","collabNames","getMonth","dateString","a","month","format","getDay","date","TimeTable","eventz","numCollabs","Array","length","year","startDay","endDay","days","console","log","map","day","Event"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\n//import weekday from \"dayjs/plugin/weekday\"\nimport dayOfYear from \"dayjs/plugin/dayOfYear\"\nimport { range } from \"ramda\";\n\ndayjs.extend(dayOfYear);\n\n//could store in db as YYYY-MM-DD but idk how to convert string to variables.\n//YES YOU CAN. YAY!! use format: dayjs(dateString).year() => dayjs(\"2021-01-01\").year() === 2021\n//get: .year(), .month(), .date(), can also use set\n\n//sample event object\nconst event = {\n    eventName: \"Holiday Reunion\",\n    firstDate: \"2021-01-01\", //can extract year, month, day from here\n    lastDate: \"2021-01-05\", //after extracting days, implies 16-18 or 16, 17, 18\n    collabNames: [\"Aristos\", \"Krithik\", \"Alex\"] //can find #of people based on array locally\n    //will need to pass in objects for each collaborator showing their availablity.\n}\nconst getMonth = (dateString) => {\n    const a = dayjs(dateString).month()\n    return dayjs(a).format(\"MMMM\") \n}\n\nconst getDay = (dateString) => {\n    const a = dayjs(dateString).date()\n    return dayjs(a).format(\"D\")\n}\n\nconst TimeTable = (eventz) => {\n    //let { eventName: p, firstDate, lastDate, collabNames } = event\n    const event = { //only works in here, can't be passed in?\n        eventName: \"Holiday Reunion\",\n        firstDate: \"2021-11-16\", //can extract year, month, day from here\n        lastDate: \"2021-11-18\", //after extracting days, implies 16-18 or 16, 17, 18\n        collabNames: [\"Aristos\", \"Krithik\", \"Alex\"] //can find #of people based on array locally\n        //will need to pass in objects for each collaborator showing their availablity.\n    }\n    const numCollabs = Array(event.collabNames).length;\n    const year = dayjs(event.firstDate).year()\n    \n\n    \n\n    const startDay = dayjs(event.firstDate).dayOfYear()\n    \n    const endDay = dayjs(event.lastDate).dayOfYear() + 1\n    //console.log(event.firstDate) //not working\n    const days = range(startDay, endDay)\n         //.map((day) => (\n         //    dayjs(`${year}-01-01`).dayOfYear(day)\n         //)) //creates range of dateStrings that can be parsed\n    console.log(endDay) //not coming out right\n\n    return (\n        <div className=\"flex w-full py-20 flex-row justify-between space-x-20\">\n            {days.map((day) => (\n                <div key={day} className=\"text-center text-2xl\">\n                    {`${getMonth(day)} ${getDay(day)}`}\n                </div>\n            ))}\n        </div>\n    )\n}\n\n\nexport default function Event() {\n    //should be passed in year, month, range of days (eg. 1-4)\n    //also, collaborators' names based on accounts (Aristos, Krithik, Alex) and number of people for grid divisions\n\n\n    return (\n        <div className=\"bg-purple-400 w-full h-screen text-center\">\n            <div className=\"w-1/2 mx-auto\">\n                <h1 className=\"text-white text-7xl font-bold tracking-tight pt-10\">MeetUp</h1>\n                <h2 className=\"text-yellow-300 text-4xl font-medium tracking-wide py-10 \">{event.eventName} | Nov 13-17, 2021</h2>\n                <h3 className=\"text-blue-900 text-3xl tracking-wide py-10 border-b-2 \">By Aristos</h3>\n            </div>\n            <TimeTable event={event}/>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}