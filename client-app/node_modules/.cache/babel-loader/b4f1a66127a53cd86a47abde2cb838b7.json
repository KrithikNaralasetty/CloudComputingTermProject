{"ast":null,"code":"import { range } from \"ramda\";\nimport dayjs from \"dayjs\";\nimport weekday from \"dayjs/plugin/weekday\";\nimport weekOfYear from \"dayjs/plugin/weekOfYear\";\ndayjs.extend(weekday);\ndayjs.extend(weekOfYear);\nexport const daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\nexport function getYearDropdownOptions(currentYear) {\n  let minYear = currentYear - 4;\n  let maxYear = currentYear + 5;\n  return range(minYear, maxYear + 1).map(y => ({\n    label: `${y}`,\n    value: y\n  }));\n}\nexport function getMonthDropdownOptions() {\n  return range(1, 13).map(m => ({\n    value: m,\n    label: dayjs().month(m - 1).format(\"MMMM\") //formats number to full month name | 'MMMM' = January-December | 0 = January ... 11 = December\n\n  }));\n}\nexport function getNumberOfDaysInMonth(year, month) {\n  return dayjs(`${year}-${month}-01`).daysInMonth(); //returns either 28, 30, 31 based on date '2019-01-25' => 31\n}\nexport function createDaysForCurrentMonth(year, month) {\n  return [...Array(getNumberOfDaysInMonth(year, month))].map((_, index) => {\n    return {\n      dateString: dayjs(`${year}-${month}-${index + 1}`).format(\"YYYY-MM-DD\"),\n      //returns an object, this line returns date string formatted\n      dayOfMonth: index + 1,\n      //day date\n      isCurrentMonth: true,\n      isSelected: false\n    };\n  }); //all in all, it returns an array of objects each representing a day in the specified month/year\n}\nexport function createDaysForPreviousMonth(year, month, currentMonthDays) {\n  const firstDayOfTheMonthWeekday = getWeekday(currentMonthDays[0].dateString); //figures out weekday of first day of month\n\n  const previousMonth = dayjs(`${year}-${month}-01`).subtract(1, \"month\");\n  const visibleNumberOfDaysFromPreviousMonth = firstDayOfTheMonthWeekday;\n  const previousMonthLastMondayDayOfMonth = dayjs(currentMonthDays[0].dateString).subtract(visibleNumberOfDaysFromPreviousMonth, \"day\").date();\n  return [...Array(visibleNumberOfDaysFromPreviousMonth)].map((_, index) => {\n    return {\n      dateString: dayjs(`${previousMonth.year()}-${previousMonth.month() + 1}-${previousMonthLastMondayDayOfMonth + index}`).format(\"YYYY-MM-DD\"),\n      dayOfMonth: previousMonthLastMondayDayOfMonth + index,\n      isCurrentMonth: false,\n      isPreviousMonth: true\n    };\n  });\n}\nexport function createDaysForNextMonth(year, month, currentMonthDays) {\n  const lastDayOfTheMonthWeekday = getWeekday(`${year}-${month}-${currentMonthDays.length}`);\n  const nextMonth = dayjs(`${year}-${month}-01`).add(1, \"month\");\n  const visibleNumberOfDaysFromNextMonth = 6 - lastDayOfTheMonthWeekday;\n  return [...Array(visibleNumberOfDaysFromNextMonth)].map((day, index) => {\n    return {\n      dateString: dayjs(`${nextMonth.year()}-${nextMonth.month() + 1}-${index + 1}`).format(\"YYYY-MM-DD\"),\n      dayOfMonth: index + 1,\n      isCurrentMonth: false,\n      isNextMonth: true\n    };\n  });\n} // sunday === 0, saturday === 6\n\nexport function getWeekday(dateString) {\n  //returns weekday 0-6 based on date passed in\n  return dayjs(dateString).weekday();\n}\nexport function isWeekendDay(dateString) {\n  return [6, 0].includes(getWeekday(dateString));\n}","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/components/Helpers.js"],"names":["range","dayjs","weekday","weekOfYear","extend","daysOfWeek","getYearDropdownOptions","currentYear","minYear","maxYear","map","y","label","value","getMonthDropdownOptions","m","month","format","getNumberOfDaysInMonth","year","daysInMonth","createDaysForCurrentMonth","Array","_","index","dateString","dayOfMonth","isCurrentMonth","isSelected","createDaysForPreviousMonth","currentMonthDays","firstDayOfTheMonthWeekday","getWeekday","previousMonth","subtract","visibleNumberOfDaysFromPreviousMonth","previousMonthLastMondayDayOfMonth","date","isPreviousMonth","createDaysForNextMonth","lastDayOfTheMonthWeekday","length","nextMonth","add","visibleNumberOfDaysFromNextMonth","day","isNextMonth","isWeekendDay","includes"],"mappings":"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","sourcesContent":["import { range } from \"ramda\";\nimport dayjs from \"dayjs\";\nimport weekday from \"dayjs/plugin/weekday\";\nimport weekOfYear from \"dayjs/plugin/weekOfYear\";\n\ndayjs.extend(weekday);\ndayjs.extend(weekOfYear);\n\nexport const daysOfWeek = [\n  \"Sun\",\n  \"Mon\",\n  \"Tue\",\n  \"Wed\",\n  \"Thur\",\n  \"Fri\",\n  \"Sat\"\n];\n\n\n\nexport function getYearDropdownOptions(currentYear) {\n  let minYear = currentYear - 4;\n  let maxYear = currentYear + 5;\n  return range(minYear, maxYear + 1).map((y) => ({ label: `${y}`, value: y }));\n}\n\nexport function getMonthDropdownOptions() {\n  return range(1, 13).map((m) => ({\n    value: m,\n    label: dayjs()\n      .month(m - 1)\n      .format(\"MMMM\") //formats number to full month name | 'MMMM' = January-December | 0 = January ... 11 = December\n  }));\n}\n\nexport function getNumberOfDaysInMonth(year, month) {\n  return dayjs(`${year}-${month}-01`).daysInMonth(); //returns either 28, 30, 31 based on date '2019-01-25' => 31\n}\n\nexport function createDaysForCurrentMonth(year, month) {\n  return [...Array(getNumberOfDaysInMonth(year, month))].map((_, index) => {\n    return {\n      dateString: dayjs(`${year}-${month}-${index + 1}`).format(\"YYYY-MM-DD\"), //returns an object, this line returns date string formatted\n      dayOfMonth: index + 1, //day date\n      isCurrentMonth: true,\n      isSelected: false\n    };\n  }); //all in all, it returns an array of objects each representing a day in the specified month/year\n}\n\nexport function createDaysForPreviousMonth(year, month, currentMonthDays) {\n  const firstDayOfTheMonthWeekday = getWeekday(currentMonthDays[0].dateString); //figures out weekday of first day of month\n  const previousMonth = dayjs(`${year}-${month}-01`).subtract(1, \"month\");\n\n  const visibleNumberOfDaysFromPreviousMonth = firstDayOfTheMonthWeekday;\n\n  const previousMonthLastMondayDayOfMonth = dayjs(\n    currentMonthDays[0].dateString\n  )\n    .subtract(visibleNumberOfDaysFromPreviousMonth, \"day\")\n    .date();\n\n  return [...Array(visibleNumberOfDaysFromPreviousMonth)].map((_, index) => {\n    return {\n      dateString: dayjs(\n        `${previousMonth.year()}-${previousMonth.month() + 1}-${\n          previousMonthLastMondayDayOfMonth + index\n        }`\n      ).format(\"YYYY-MM-DD\"),\n      dayOfMonth: previousMonthLastMondayDayOfMonth + index,\n      isCurrentMonth: false,\n      isPreviousMonth: true\n    };\n  });\n}\n\nexport function createDaysForNextMonth(year, month, currentMonthDays) {\n  const lastDayOfTheMonthWeekday = getWeekday(\n    `${year}-${month}-${currentMonthDays.length}`\n  );\n  const nextMonth = dayjs(`${year}-${month}-01`).add(1, \"month\");\n  const visibleNumberOfDaysFromNextMonth = 6 - lastDayOfTheMonthWeekday;\n\n  return [...Array(visibleNumberOfDaysFromNextMonth)].map((day, index) => {\n    return {\n      dateString: dayjs(\n        `${nextMonth.year()}-${nextMonth.month() + 1}-${index + 1}`\n      ).format(\"YYYY-MM-DD\"),\n      dayOfMonth: index + 1,\n      isCurrentMonth: false,\n      isNextMonth: true\n    };\n  });\n}\n\n// sunday === 0, saturday === 6\nexport function getWeekday(dateString) { //returns weekday 0-6 based on date passed in\n  return dayjs(dateString).weekday();\n}\n\nexport function isWeekendDay(dateString) {\n  return [6, 0].includes(getWeekday(dateString));\n}\n\n"]},"metadata":{},"sourceType":"module"}