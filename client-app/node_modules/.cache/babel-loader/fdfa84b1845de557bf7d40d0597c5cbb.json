{"ast":null,"code":"var _jsxFileName = \"/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/components/Calendar.js\";\n//import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { daysOfWeek, createDaysForCurrentMonth, createDaysForNextMonth, createDaysForPreviousMonth, isWeekendDay, getMonthDropdownOptions, getYearDropdownOptions } from \"./Helpers\";\nimport { BiChevronLeft, BiChevronRight } from 'react-icons/bi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nCalendar.propTypes = {\n  //This is basically the parameters you need to pass when calling <Calendar />\n  className: PropTypes.string,\n  yearAndMonth: PropTypes.arrayOf(PropTypes.number).isRequired,\n  // e.g. [2021, 6] for June 2021\n  onYearAndMonthChange: PropTypes.func.isRequired,\n  renderDay: PropTypes.func\n};\nexport default function Calendar(_ref) {\n  let {\n    startDate,\n    endDate,\n    //whether or not selected, determines if circle styles will load.\n    selection,\n    //selection state func\n    className = \"\",\n    yearAndMonth = [2021, 9],\n    onYearAndMonthChange,\n    renderDay = () => null\n  } = _ref;\n  const [year, month] = yearAndMonth;\n  let currentMonthDays = createDaysForCurrentMonth(year, month);\n  let previousMonthDays = createDaysForPreviousMonth(year, month, currentMonthDays);\n  let nextMonthDays = createDaysForNextMonth(year, month, currentMonthDays); //returns an array of objects representing each day in the specified month/year\n\n  let calendarGridDayObjects = [...previousMonthDays, ...currentMonthDays, ...nextMonthDays];\n\n  const handleMonthNavBackButtonClick = () => {\n    let nextYear = year;\n    let nextMonth = month - 1;\n\n    if (nextMonth === 0) {\n      nextMonth = 12;\n      nextYear = year - 1;\n    }\n\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n  const handleMonthNavForwardButtonClick = () => {\n    let nextYear = year;\n    let nextMonth = month + 1;\n\n    if (nextMonth === 13) {\n      nextMonth = 1;\n      nextYear = year + 1;\n    }\n\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n  const handleMonthSelect = evt => {\n    let nextYear = year;\n    let nextMonth = parseInt(evt.target.value, 10);\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n  const handleYearSelect = evt => {\n    let nextMonth = month;\n    let nextYear = parseInt(evt.target.value, 10);\n    onYearAndMonthChange([nextYear, nextMonth]);\n  }; //------statefulness-------////\n  //send details once click next is set\n\n\n  const selectedClickHandler = dayObject => {\n    //e.preventDefault()\n    // if (dateCount === 2)\n    // dayObject.isSelected = true;\n    selection(dayObject.dateString); //passed into calendar\n  };\n\n  const isMiddleDate = dates => {//check if calendar day is a middle date with white top/bottom borders\n  }; //-------------------------/////\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-root px-24 py-10 rounded-2xl bg-yellow-400 shadow-xl\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-header flex flex-row space-x-12 justify-center text-white\",\n      children: [/*#__PURE__*/_jsxDEV(BiChevronLeft, {\n        className: \"text-6xl hover:text-gray-500\",\n        onClick: handleMonthNavBackButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"month-select text-3xl border-none bg-yellow-400\",\n        value: month,\n        onChange: handleMonthSelect,\n        children: getMonthDropdownOptions().map(_ref2 => {\n          let {\n            label,\n            value\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: value,\n            children: label\n          }, value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"year-select text-3xl border-none bg-yellow-400\",\n        value: year,\n        onChange: handleYearSelect,\n        children: getYearDropdownOptions(year).map(_ref3 => {\n          let {\n            label,\n            value\n          } = _ref3;\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: value,\n            children: label\n          }, value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BiChevronRight, {\n        className: \"text-6xl hover:text-gray-500\",\n        onClick: handleMonthNavForwardButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days-of-week grid grid-cols-7 text-2xl my-4 container text-white\",\n      children: daysOfWeek.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames(\"day-of-week-header-cell p-1\", {\n          \"text-gray-500\": [6, 0].includes(index) //if it's a weekend day 0: Sunday, or 6: Saturday\n\n        }),\n        children: day\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days-grid grid grid-cols-7 h-full text-gray-500 sm:text-xl md:text-2xl lg:text-4xl font-light text-opacity-50\",\n      children: calendarGridDayObjects.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames(\"day-grid-item-container flex flex-col relative p-5 hover:text-opacity-50\", {\n          \"weekend-day\": isWeekendDay(day.dateString),\n          //if true, then add class to list\n          \"text-white text-opacity-100\": day.isCurrentMonth // if is current month, add those classes to list. true false\n\n        }),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => selectedClickHandler(day),\n          className: classNames(\"day-content-wrapper relative min-h-0\", {\n            \"border-2 rounded-full border-white\": startDate === day.dateString || endDate === day.dateString\n          }),\n          children: renderDay(day)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)\n      }, day.dateString, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_c = Calendar;\nCalendarDayHeader.propTypes = {\n  calendarDayObject: PropTypes.object.isRequired\n};\nexport function CalendarDayHeader(_ref4) {\n  let {\n    calendarDayObject\n  } = _ref4;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"day-grid-item-header cursor-pointer\",\n    children: calendarDayObject.dayOfMonth\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this); //if selected\n}\n_c2 = CalendarDayHeader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Calendar\");\n$RefreshReg$(_c2, \"CalendarDayHeader\");","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/components/Calendar.js"],"names":["PropTypes","classNames","daysOfWeek","createDaysForCurrentMonth","createDaysForNextMonth","createDaysForPreviousMonth","isWeekendDay","getMonthDropdownOptions","getYearDropdownOptions","BiChevronLeft","BiChevronRight","Calendar","propTypes","className","string","yearAndMonth","arrayOf","number","isRequired","onYearAndMonthChange","func","renderDay","startDate","endDate","selection","year","month","currentMonthDays","previousMonthDays","nextMonthDays","calendarGridDayObjects","handleMonthNavBackButtonClick","nextYear","nextMonth","handleMonthNavForwardButtonClick","handleMonthSelect","evt","parseInt","target","value","handleYearSelect","selectedClickHandler","dayObject","dateString","isMiddleDate","dates","map","label","day","index","includes","isCurrentMonth","CalendarDayHeader","calendarDayObject","object","dayOfMonth"],"mappings":"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","sourcesContent":["//import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport {\n  daysOfWeek,\n  createDaysForCurrentMonth,\n  createDaysForNextMonth,\n  createDaysForPreviousMonth,\n  isWeekendDay,\n  getMonthDropdownOptions,\n  getYearDropdownOptions\n} from \"./Helpers\";\n\nimport { BiChevronLeft, BiChevronRight } from 'react-icons/bi'\n\nCalendar.propTypes = { //This is basically the parameters you need to pass when calling <Calendar />\n  className: PropTypes.string,\n  yearAndMonth: PropTypes.arrayOf(PropTypes.number).isRequired, // e.g. [2021, 6] for June 2021\n  onYearAndMonthChange: PropTypes.func.isRequired,\n  renderDay: PropTypes.func\n};\n\nexport default function Calendar({\n  startDate, endDate, //whether or not selected, determines if circle styles will load.\n  selection, //selection state func\n  className = \"\",\n  yearAndMonth = [2021, 9],\n  onYearAndMonthChange,\n  renderDay = () => null\n}) {\n  const [year, month] = yearAndMonth;\n\n  let currentMonthDays = createDaysForCurrentMonth(year, month);\n  let previousMonthDays = createDaysForPreviousMonth(\n    year,\n    month,\n    currentMonthDays\n  );\n  let nextMonthDays = createDaysForNextMonth(year, month, currentMonthDays); //returns an array of objects representing each day in the specified month/year\n  let calendarGridDayObjects = [\n    ...previousMonthDays,\n    ...currentMonthDays,\n    ...nextMonthDays\n  ];\n\n  const handleMonthNavBackButtonClick = () => {\n    let nextYear = year;\n    let nextMonth = month - 1;\n    if (nextMonth === 0) {\n      nextMonth = 12;\n      nextYear = year - 1;\n    }\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n  const handleMonthNavForwardButtonClick = () => {\n    let nextYear = year;\n    let nextMonth = month + 1;\n    if (nextMonth === 13) {\n      nextMonth = 1;\n      nextYear = year + 1;\n    }\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n  const handleMonthSelect = (evt) => {\n    let nextYear = year;\n    let nextMonth = parseInt(evt.target.value, 10);\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n  const handleYearSelect = (evt) => {\n    let nextMonth = month;\n    let nextYear = parseInt(evt.target.value, 10);\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n//------statefulness-------////\n\n//send details once click next is set\n\nconst selectedClickHandler = (dayObject) => {\n  //e.preventDefault()\n  // if (dateCount === 2)\n  // dayObject.isSelected = true;\n  selection(dayObject.dateString) //passed into calendar\n}\n\nconst isMiddleDate = (dates) => {\n  //check if calendar day is a middle date with white top/bottom borders\n}\n\n\n//-------------------------/////\n  return (\n    <div className=\"calendar-root px-24 py-10 rounded-2xl bg-yellow-400 shadow-xl\">\n\n      <div className=\"navigation-header flex flex-row space-x-12 justify-center text-white\">\n        <BiChevronLeft className=\"text-6xl hover:text-gray-500\" onClick={handleMonthNavBackButtonClick} />\n        <select\n          className=\"month-select text-3xl border-none bg-yellow-400\"\n          value={month}\n          onChange={handleMonthSelect}\n        >\n          {getMonthDropdownOptions().map(({ label, value }) => (\n            <option value={value} key={value}>\n              {label}\n            </option>\n          ))}\n        </select>\n        <select\n          className=\"year-select text-3xl border-none bg-yellow-400\"\n          value={year}\n          onChange={handleYearSelect}\n        >\n          {getYearDropdownOptions(year).map(({ label, value }) => (\n            <option value={value} key={value}>\n              {label}\n            </option>\n          ))}\n        </select>\n        <BiChevronRight className=\"text-6xl hover:text-gray-500\" onClick={handleMonthNavForwardButtonClick} />\n      </div>\n\n        {/*------------Days of Week--------------*/}\n\n      <div className=\"days-of-week grid grid-cols-7 text-2xl my-4 container text-white\">\n        {daysOfWeek.map((day, index) => (\n          <div\n            key={day}\n            className={classNames(\"day-of-week-header-cell p-1\", {\n              \"text-gray-500\": [6, 0].includes(index) //if it's a weekend day 0: Sunday, or 6: Saturday\n            })}\n          >\n            {day}\n          </div>\n        ))}\n      </div>\n\n        {/*------------Grid--------------*/}     \n\n      <div className=\"days-grid grid grid-cols-7 h-full text-gray-500 sm:text-xl md:text-2xl lg:text-4xl font-light text-opacity-50\">\n        {calendarGridDayObjects.map((day) => (\n          <div\n            key={day.dateString}\n            className={classNames(\"day-grid-item-container flex flex-col relative p-5 hover:text-opacity-50\", {\n              \"weekend-day\": isWeekendDay(day.dateString), //if true, then add class to list\n              \"text-white text-opacity-100\": day.isCurrentMonth // if is current month, add those classes to list. true false\n            })}\n          >\n            {/* <div onClick={() => selectedClickHandler(day)} \n            className=\"day-content-wrapper relative min-h-0\">\n              {renderDay(day)} \n            </div> */}\n            <div onClick={() => selectedClickHandler(day)} \n            className={classNames(\"day-content-wrapper relative min-h-0\", {\n              \"border-2 rounded-full border-white\": startDate === day.dateString || endDate === day.dateString\n            })}>\n              {renderDay(day)}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nCalendarDayHeader.propTypes = {\n  calendarDayObject: PropTypes.object.isRequired\n};\nexport function CalendarDayHeader({ calendarDayObject }) {\n  return (\n    <div className=\"day-grid-item-header cursor-pointer\">{calendarDayObject.dayOfMonth}</div>\n  ); //if selected\n}"]},"metadata":{},"sourceType":"module"}