{"ast":null,"code":"import dayjs from \"dayjs\";\nimport dayOfYear from \"dayjs/plugin/dayOfYear\"; //import { range } from \"ramda\";\n\nconst range = function (start, end) {\n  let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let output = [];\n\n  if (typeof end === 'undefined') {\n    end = start;\n    start = 0;\n  }\n\n  for (let i = start; i < end; i += step) {\n    output.push(i);\n  }\n\n  return output;\n};\n\ndayjs.extend(dayOfYear);\nexport function getRangeOfDates(firstDate, lastDate) {\n  const start = dayjs(firstDate).dayOfYear();\n  const end = dayjs(lastDate).dayOfYear();\n  const startYear = dayjs(firstDate).year();\n  const days = range(1, 4); //should work between years now\n\n  console.log(\"EventHelpers: days=\" + days);\n  const dates = days.map(day => dayjs(`${start > end ? startYear + 1 : startYear}-01-01`).dayOfYear(day));\n  console.log(\"EventHelpers: \" + dates);\n  return dates;\n}","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/components/EventHelpers.js"],"names":["dayjs","dayOfYear","range","start","end","step","output","i","push","extend","getRangeOfDates","firstDate","lastDate","startYear","year","days","console","log","dates","map","day"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CACA;;AACA,MAAMC,KAAK,GAAG,UAACC,KAAD,EAAQC,GAAR,EAA0B;AAAA,MAAbC,IAAa,uEAAN,CAAM;AACpC,MAAIC,MAAM,GAAG,EAAb;;AAEA,MAAI,OAAOF,GAAP,KAAe,WAAnB,EAAgC;AAC9BA,IAAAA,GAAG,GAAGD,KAAN;AACAA,IAAAA,KAAK,GAAG,CAAR;AACD;;AAED,OAAK,IAAII,CAAC,GAAGJ,KAAb,EAAoBI,CAAC,GAAGH,GAAxB,EAA6BG,CAAC,IAAIF,IAAlC,EAAwC;AACtCC,IAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACD;;AAED,SAAOD,MAAP;AACD,CAbH;;AAeAN,KAAK,CAACS,MAAN,CAAaR,SAAb;AAGA,OAAO,SAASS,eAAT,CAAyBC,SAAzB,EAAoCC,QAApC,EAA8C;AACjD,QAAMT,KAAK,GAAGH,KAAK,CAACW,SAAD,CAAL,CAAiBV,SAAjB,EAAd;AACA,QAAMG,GAAG,GAAGJ,KAAK,CAACY,QAAD,CAAL,CAAgBX,SAAhB,EAAZ;AACA,QAAMY,SAAS,GAAGb,KAAK,CAACW,SAAD,CAAL,CAAiBG,IAAjB,EAAlB;AAIA,QAAMC,IAAI,GAAGb,KAAK,CAAC,CAAD,EAAI,CAAJ,CAAlB,CAPiD,CAOxB;;AACzBc,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBF,IAApC;AACA,QAAMG,KAAK,GAAGH,IAAI,CAACI,GAAL,CAAUC,GAAD,IACnBpB,KAAK,CAAE,GAAEG,KAAK,GAAGC,GAAR,GAAcS,SAAS,GAAG,CAA1B,GAA8BA,SAAU,QAA5C,CAAL,CAA0DZ,SAA1D,CAAoEmB,GAApE,CADU,CAAd;AAGAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBC,KAA/B;AACA,SAAOA,KAAP;AACH","sourcesContent":["import dayjs from \"dayjs\";\nimport dayOfYear from \"dayjs/plugin/dayOfYear\";\n//import { range } from \"ramda\";\nconst range = (start, end, step = 1) => {\n    let output = [];\n  \n    if (typeof end === 'undefined') {\n      end = start;\n      start = 0;\n    }\n  \n    for (let i = start; i < end; i += step) {\n      output.push(i);\n    }\n  \n    return output;\n  };\n\ndayjs.extend(dayOfYear)\n\n\nexport function getRangeOfDates(firstDate, lastDate) {\n    const start = dayjs(firstDate).dayOfYear()\n    const end = dayjs(lastDate).dayOfYear()\n    const startYear = dayjs(firstDate).year()\n\n\n\n    const days = range(1, 4) //should work between years now\n    console.log(\"EventHelpers: days=\" + days)\n    const dates = days.map((day) => (\n        dayjs(`${start > end ? startYear + 1 : startYear}-01-01`).dayOfYear(day)\n    ))\n    console.log(\"EventHelpers: \" + dates)\n    return dates\n}\n"]},"metadata":{},"sourceType":"module"}