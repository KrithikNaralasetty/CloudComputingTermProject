{"ast":null,"code":"import{range}from\"ramda\";import dayjs from\"dayjs\";import dayOfYear from\"dayjs/plugin/dayOfYear\";dayjs.extend(dayOfYear);export function getRangeOfDates(firstDate,lastDate){var start=dayjs(firstDate).dayOfYear();var end=dayjs(lastDate).dayOfYear();var startYear=dayjs(firstDate).year();var days=range(start,end+1);//should work between years now\nvar dates=days.map(function(day){return dayjs(\"\".concat(start>end?startYear+1:startYear,\"-01-01\")).dayOfYear(day).format('YYYY-MM-DD');});return dates;}// export function createDateHour(date, hour) {\n//     let i = dayjs(date).hour(hour)\n//     return dayjs(i).format('YYYY-MM-DD HH:mm:ss')\n// }\n// console.log(createDateHour(\"2021-11-16\", 10))","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/components/EventHelpers.js"],"names":["range","dayjs","dayOfYear","extend","getRangeOfDates","firstDate","lastDate","start","end","startYear","year","days","dates","map","day","format"],"mappings":"AAAA,OAASA,KAAT,KAAsB,OAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CAIAD,KAAK,CAACE,MAAN,CAAaD,SAAb,EAGA,MAAO,SAASE,CAAAA,eAAT,CAAyBC,SAAzB,CAAoCC,QAApC,CAA8C,CACjD,GAAMC,CAAAA,KAAK,CAAGN,KAAK,CAACI,SAAD,CAAL,CAAiBH,SAAjB,EAAd,CACA,GAAMM,CAAAA,GAAG,CAAGP,KAAK,CAACK,QAAD,CAAL,CAAgBJ,SAAhB,EAAZ,CACA,GAAMO,CAAAA,SAAS,CAAGR,KAAK,CAACI,SAAD,CAAL,CAAiBK,IAAjB,EAAlB,CAEA,GAAMC,CAAAA,IAAI,CAAGX,KAAK,CAACO,KAAD,CAAQC,GAAG,CAAG,CAAd,CAAlB,CAAmC;AACnC,GAAMI,CAAAA,KAAK,CAAGD,IAAI,CAACE,GAAL,CAAS,SAACC,GAAD,QACnBb,CAAAA,KAAK,WAAIM,KAAK,CAAGC,GAAR,CAAcC,SAAS,CAAG,CAA1B,CAA8BA,SAAlC,WAAL,CAA0DP,SAA1D,CAAoEY,GAApE,EAAyEC,MAAzE,CAAgF,YAAhF,CADmB,EAAT,CAAd,CAIA,MAAOH,CAAAA,KAAP,CACH,CAED;AACA;AAEA;AACA;AAEA","sourcesContent":["import { range } from \"ramda\";\nimport dayjs from \"dayjs\";\nimport dayOfYear from \"dayjs/plugin/dayOfYear\";\n\n\n\ndayjs.extend(dayOfYear)\n\n\nexport function getRangeOfDates(firstDate, lastDate) {\n    const start = dayjs(firstDate).dayOfYear()\n    const end = dayjs(lastDate).dayOfYear()\n    const startYear = dayjs(firstDate).year()\n    \n    const days = range(start, end + 1) //should work between years now\n    const dates = days.map((day) => (\n        dayjs(`${start > end ? startYear + 1 : startYear}-01-01`).dayOfYear(day).format('YYYY-MM-DD')\n    ))\n\n    return dates\n}\n\n// export function createDateHour(date, hour) {\n//     let i = dayjs(date).hour(hour)\n    \n//     return dayjs(i).format('YYYY-MM-DD HH:mm:ss')\n// }\n\n// console.log(createDateHour(\"2021-11-16\", 10))"]},"metadata":{},"sourceType":"module"}