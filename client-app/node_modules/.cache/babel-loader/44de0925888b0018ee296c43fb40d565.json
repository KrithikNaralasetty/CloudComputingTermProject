{"ast":null,"code":"import dayjs from \"dayjs\";\nimport dayOfYear from \"dayjs/plugin/dayOfYear\"; //import { range } from \"ramda\";\n\nconst range = (min, max) => [...Array(max - min + 1).keys()].map(i => i + min);\n\ndayjs.extend(dayOfYear);\nexport function getRangeOfDates(firstDate, lastDate) {\n  const start = dayjs(firstDate).dayOfYear();\n  const end = dayjs(lastDate).dayOfYear();\n  const startYear = dayjs(firstDate).year();\n  const days = range(start, end); //should work between years now\n\n  console.log(\"EventHelpers: days=\" + days);\n  const dates = days.map(day => dayjs(`${start > end ? startYear + 1 : startYear}-01-01`).dayOfYear(day));\n  console.log(\"EventHelpers: \" + dates);\n  return dates;\n}","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/components/EventHelpers.js"],"names":["dayjs","dayOfYear","range","min","max","Array","keys","map","i","extend","getRangeOfDates","firstDate","lastDate","start","end","startYear","year","days","console","log","dates","day"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CACA;;AACA,MAAMC,KAAK,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc,CAAC,GAAGC,KAAK,CAACD,GAAG,GAAGD,GAAN,GAAY,CAAb,CAAL,CAAqBG,IAArB,EAAJ,EAAiCC,GAAjC,CAAqCC,CAAC,IAAIA,CAAC,GAAGL,GAA9C,CAA5B;;AACAH,KAAK,CAACS,MAAN,CAAaR,SAAb;AAGA,OAAO,SAASS,eAAT,CAAyBC,SAAzB,EAAoCC,QAApC,EAA8C;AACjD,QAAMC,KAAK,GAAGb,KAAK,CAACW,SAAD,CAAL,CAAiBV,SAAjB,EAAd;AACA,QAAMa,GAAG,GAAGd,KAAK,CAACY,QAAD,CAAL,CAAgBX,SAAhB,EAAZ;AACA,QAAMc,SAAS,GAAGf,KAAK,CAACW,SAAD,CAAL,CAAiBK,IAAjB,EAAlB;AAIA,QAAMC,IAAI,GAAGf,KAAK,CAACW,KAAD,EAAQC,GAAR,CAAlB,CAPiD,CAOlB;;AAC/BI,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBF,IAApC;AACA,QAAMG,KAAK,GAAGH,IAAI,CAACV,GAAL,CAAUc,GAAD,IACnBrB,KAAK,CAAE,GAAEa,KAAK,GAAGC,GAAR,GAAcC,SAAS,GAAG,CAA1B,GAA8BA,SAAU,QAA5C,CAAL,CAA0Dd,SAA1D,CAAoEoB,GAApE,CADU,CAAd;AAGAH,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBC,KAA/B;AACA,SAAOA,KAAP;AACH","sourcesContent":["import dayjs from \"dayjs\";\nimport dayOfYear from \"dayjs/plugin/dayOfYear\";\n//import { range } from \"ramda\";\nconst range = (min, max) => [...Array(max - min + 1).keys()].map(i => i + min);\ndayjs.extend(dayOfYear)\n\n\nexport function getRangeOfDates(firstDate, lastDate) {\n    const start = dayjs(firstDate).dayOfYear()\n    const end = dayjs(lastDate).dayOfYear()\n    const startYear = dayjs(firstDate).year()\n\n\n\n    const days = range(start, end) //should work between years now\n    console.log(\"EventHelpers: days=\" + days)\n    const dates = days.map((day) => (\n        dayjs(`${start > end ? startYear + 1 : startYear}-01-01`).dayOfYear(day)\n    ))\n    console.log(\"EventHelpers: \" + dates)\n    return dates\n}\n"]},"metadata":{},"sourceType":"module"}