{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";//import { useState } from \"react\";\nimport classNames from\"classnames\";import{daysOfWeek,createDaysForCurrentMonth,createDaysForNextMonth,createDaysForPreviousMonth,isWeekendDay,getMonthDropdownOptions,getYearDropdownOptions}from\"./Helpers\";import{BiChevronLeft,BiChevronRight}from'react-icons/bi';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Calendar(_ref){var startDate=_ref.startDate,endDate=_ref.endDate,selection=_ref.selection,_ref$className=_ref.className,className=_ref$className===void 0?\"\":_ref$className,middleDateRange=_ref.middleDateRange,_ref$yearAndMonth=_ref.yearAndMonth,yearAndMonth=_ref$yearAndMonth===void 0?[2021,9]:_ref$yearAndMonth,onYearAndMonthChange=_ref.onYearAndMonthChange,_ref$renderDay=_ref.renderDay,renderDay=_ref$renderDay===void 0?function(){return null;}:_ref$renderDay;var _yearAndMonth=_slicedToArray(yearAndMonth,2),year=_yearAndMonth[0],month=_yearAndMonth[1];var currentMonthDays=createDaysForCurrentMonth(year,month);var previousMonthDays=createDaysForPreviousMonth(year,month,currentMonthDays);var nextMonthDays=createDaysForNextMonth(year,month,currentMonthDays);//returns an array of objects representing each day in the specified month/year\nvar calendarGridDayObjects=[].concat(_toConsumableArray(previousMonthDays),_toConsumableArray(currentMonthDays),_toConsumableArray(nextMonthDays));var handleMonthNavBackButtonClick=function handleMonthNavBackButtonClick(){var nextYear=year;var nextMonth=month-1;if(nextMonth===0){nextMonth=12;nextYear=year-1;}onYearAndMonthChange([nextYear,nextMonth]);};var handleMonthNavForwardButtonClick=function handleMonthNavForwardButtonClick(){var nextYear=year;var nextMonth=month+1;if(nextMonth===13){nextMonth=1;nextYear=year+1;}onYearAndMonthChange([nextYear,nextMonth]);};var handleMonthSelect=function handleMonthSelect(evt){var nextYear=year;var nextMonth=parseInt(evt.target.value,10);onYearAndMonthChange([nextYear,nextMonth]);};var handleYearSelect=function handleYearSelect(evt){var nextMonth=month;var nextYear=parseInt(evt.target.value,10);onYearAndMonthChange([nextYear,nextMonth]);};//------statefulness-------////\n//send details once click next is set\nvar selectedClickHandler=function selectedClickHandler(dayObject){selection(dayObject.dateString);//passed into calendar\n};var isMiddleDate=function isMiddleDate(date){var _iterator=_createForOfIteratorHelper(middleDateRange),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var day=_step.value;if(day===date)return true;}}catch(err){_iterator.e(err);}finally{_iterator.f();}};var isFirstOrLastDate=function isFirstOrLastDate(date){return startDate===date||endDate===date;};//-------------------------/////\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"calendar-root px-24 py-10 rounded-2xl bg-yellow-400 shadow-xl\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"navigation-header flex flex-row space-x-12 justify-center text-white\",children:[/*#__PURE__*/_jsx(BiChevronLeft,{className:\"text-6xl hover:text-gray-500\",onClick:handleMonthNavBackButtonClick}),/*#__PURE__*/_jsx(\"select\",{className:\"month-select text-3xl border-none bg-yellow-400\",value:month,onChange:handleMonthSelect,children:getMonthDropdownOptions().map(function(_ref2){var label=_ref2.label,value=_ref2.value;return/*#__PURE__*/_jsx(\"option\",{value:value,children:label},value);})}),/*#__PURE__*/_jsx(\"select\",{className:\"year-select text-3xl border-none bg-yellow-400\",value:year,onChange:handleYearSelect,children:getYearDropdownOptions(year).map(function(_ref3){var label=_ref3.label,value=_ref3.value;return/*#__PURE__*/_jsx(\"option\",{value:value,children:label},value);})}),/*#__PURE__*/_jsx(BiChevronRight,{className:\"text-6xl hover:text-gray-500\",onClick:handleMonthNavForwardButtonClick})]}),/*#__PURE__*/_jsx(\"div\",{className:\"days-of-week grid grid-cols-7 text-2xl my-4 container text-white\",children:daysOfWeek.map(function(day,index){return/*#__PURE__*/_jsx(\"div\",{className:classNames(\"day-of-week-header-cell p-1\",{\"text-gray-500\":[6,0].includes(index)//if it's a weekend day 0: Sunday, or 6: Saturday\n}),children:day},day);})}),/*#__PURE__*/_jsx(\"div\",{className:\"days-grid grid grid-cols-7 h-full text-gray-500 sm:text-xl md:text-2xl lg:text-4xl font-light text-opacity-50\",children:calendarGridDayObjects.map(function(day){return/*#__PURE__*/_jsx(\"div\",{className:classNames(\"day-grid-item-container flex flex-col relative p-2 hover:text-opacity-50\",{\"weekend-day\":isWeekendDay(day.dateString),//if true, then add class to list\n\"text-white text-opacity-100\":day.isCurrentMonth// if is current month, add those classes to list. true false\n}),children:/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){return selectedClickHandler(day);},className:classNames(\"day-content-wrapper relative min-h-0 p-4\",{\"bg-blue-900 rounded-full shadow-md\":isFirstOrLastDate(day.dateString),\"border-2 rounded-full border-dotted border-blue-900\":isMiddleDate(day.dateString)}),children:renderDay(day)})},day.dateString);})})]});}export function CalendarDayHeader(_ref4){var calendarDayObject=_ref4.calendarDayObject;return/*#__PURE__*/_jsx(\"div\",{className:\"day-grid-item-header cursor-pointer\",children:calendarDayObject.dayOfMonth});//if selected\n}","map":{"version":3,"sources":["/Users/aristos/Documents/Fall_2021/COEN_241/CloudComputingTermProject/client-app/src/pages/components/Calendar.js"],"names":["classNames","daysOfWeek","createDaysForCurrentMonth","createDaysForNextMonth","createDaysForPreviousMonth","isWeekendDay","getMonthDropdownOptions","getYearDropdownOptions","BiChevronLeft","BiChevronRight","Calendar","startDate","endDate","selection","className","middleDateRange","yearAndMonth","onYearAndMonthChange","renderDay","year","month","currentMonthDays","previousMonthDays","nextMonthDays","calendarGridDayObjects","handleMonthNavBackButtonClick","nextYear","nextMonth","handleMonthNavForwardButtonClick","handleMonthSelect","evt","parseInt","target","value","handleYearSelect","selectedClickHandler","dayObject","dateString","isMiddleDate","date","day","isFirstOrLastDate","map","label","index","includes","isCurrentMonth","CalendarDayHeader","calendarDayObject","dayOfMonth"],"mappings":"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","sourcesContent":["//import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nimport {\n  daysOfWeek,\n  createDaysForCurrentMonth,\n  createDaysForNextMonth,\n  createDaysForPreviousMonth,\n  isWeekendDay,\n  getMonthDropdownOptions,\n  getYearDropdownOptions\n} from \"./Helpers\";\n\nimport { BiChevronLeft, BiChevronRight } from 'react-icons/bi'\n\nCalendar.propTypes = { //This is basically the parameters you need to pass when calling <Calendar />\n  className: PropTypes.string,\n  yearAndMonth: PropTypes.arrayOf(PropTypes.number).isRequired, // e.g. [2021, 6] for June 2021\n  onYearAndMonthChange: PropTypes.func.isRequired,\n  renderDay: PropTypes.func\n};\n\nexport default function Calendar({\n  startDate, endDate, //whether or not selected, determines if circle styles will load.\n  selection, //selection state func\n  className = \"\",\n  middleDateRange,\n  yearAndMonth = [2021, 9],\n  onYearAndMonthChange,\n  renderDay = () => null\n}) {\n  const [year, month] = yearAndMonth;\n\n  let currentMonthDays = createDaysForCurrentMonth(year, month);\n  let previousMonthDays = createDaysForPreviousMonth(\n    year,\n    month,\n    currentMonthDays\n  );\n  let nextMonthDays = createDaysForNextMonth(year, month, currentMonthDays); //returns an array of objects representing each day in the specified month/year\n  let calendarGridDayObjects = [\n    ...previousMonthDays,\n    ...currentMonthDays,\n    ...nextMonthDays\n  ];\n\n  const handleMonthNavBackButtonClick = () => {\n    let nextYear = year;\n    let nextMonth = month - 1;\n    if (nextMonth === 0) {\n      nextMonth = 12;\n      nextYear = year - 1;\n    }\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n  const handleMonthNavForwardButtonClick = () => {\n    let nextYear = year;\n    let nextMonth = month + 1;\n    if (nextMonth === 13) {\n      nextMonth = 1;\n      nextYear = year + 1;\n    }\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n  const handleMonthSelect = (evt) => {\n    let nextYear = year;\n    let nextMonth = parseInt(evt.target.value, 10);\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n  const handleYearSelect = (evt) => {\n    let nextMonth = month;\n    let nextYear = parseInt(evt.target.value, 10);\n    onYearAndMonthChange([nextYear, nextMonth]);\n  };\n\n//------statefulness-------////\n\n//send details once click next is set\n\nconst selectedClickHandler = (dayObject) => {\n  selection(dayObject.dateString) //passed into calendar\n}\n\nconst isMiddleDate = (date) => {\n  for (const day of middleDateRange) {\n    if (day === date)\n      return true\n  }\n}\n\nconst isFirstOrLastDate = (date) => {\n  return (startDate === date || endDate === date)\n}\n\n\n//-------------------------/////\n  return (\n    <div className=\"calendar-root px-24 py-10 rounded-2xl bg-yellow-400 shadow-xl\">\n\n      <div className=\"navigation-header flex flex-row space-x-12 justify-center text-white\">\n        <BiChevronLeft className=\"text-6xl hover:text-gray-500\" onClick={handleMonthNavBackButtonClick} />\n        <select\n          className=\"month-select text-3xl border-none bg-yellow-400\"\n          value={month}\n          onChange={handleMonthSelect}\n        >\n          {getMonthDropdownOptions().map(({ label, value }) => (\n            <option value={value} key={value}>\n              {label}\n            </option>\n          ))}\n        </select>\n        <select\n          className=\"year-select text-3xl border-none bg-yellow-400\"\n          value={year}\n          onChange={handleYearSelect}\n        >\n          {getYearDropdownOptions(year).map(({ label, value }) => (\n            <option value={value} key={value}>\n              {label}\n            </option>\n          ))}\n        </select>\n        <BiChevronRight className=\"text-6xl hover:text-gray-500\" onClick={handleMonthNavForwardButtonClick} />\n      </div>\n\n        {/*------------Days of Week--------------*/}\n\n      <div className=\"days-of-week grid grid-cols-7 text-2xl my-4 container text-white\">\n        {daysOfWeek.map((day, index) => (\n          <div\n            key={day}\n            className={classNames(\"day-of-week-header-cell p-1\", {\n              \"text-gray-500\": [6, 0].includes(index) //if it's a weekend day 0: Sunday, or 6: Saturday\n            })}\n          >\n            {day}\n          </div>\n        ))}\n      </div>\n\n        {/*------------Grid--------------*/}     \n\n      <div className=\"days-grid grid grid-cols-7 h-full text-gray-500 sm:text-xl md:text-2xl lg:text-4xl font-light text-opacity-50\">\n        {calendarGridDayObjects.map((day) => (\n          <div\n            key={day.dateString}\n            className={classNames(\"day-grid-item-container flex flex-col relative p-2 hover:text-opacity-50\", {\n              \"weekend-day\": isWeekendDay(day.dateString), //if true, then add class to list\n              \"text-white text-opacity-100\": day.isCurrentMonth, // if is current month, add those classes to list. true false\n            \n            })}\n          >\n            <div onClick={() => selectedClickHandler(day)} \n            className={classNames(\"day-content-wrapper relative min-h-0 p-4\", {\n              \"bg-blue-900 rounded-full shadow-md\": isFirstOrLastDate(day.dateString),\n              \"border-2 rounded-full border-dotted border-blue-900\": isMiddleDate(day.dateString)\n              \n            })}>\n              {renderDay(day)}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nCalendarDayHeader.propTypes = {\n  calendarDayObject: PropTypes.object.isRequired\n};\nexport function CalendarDayHeader({ calendarDayObject }) {\n  return (\n    <div className=\"day-grid-item-header cursor-pointer\">{calendarDayObject.dayOfMonth}</div>\n  ); //if selected\n}"]},"metadata":{},"sourceType":"module"}